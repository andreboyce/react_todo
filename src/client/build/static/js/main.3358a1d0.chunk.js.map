{"version":3,"sources":["routes/LoginForm.js","routes/LogOutPage.js","routes/TodoList.js","routes/SignUpForm.js","routes/CreateForm.js","routes/UpdateForm.js","routes/DeleteId.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","Component","constructor","props","super","this","apihost","process","apiport","state","email","password","isLoggedin","token","login","parentObject","parentGetCallback","handleChange","bind","handleSubmit","e","target","value","type","checked","name","setState","preventDefault","endpoint","body","JSON","stringify","fetch","method","headers","then","response","ok","json","parentSetCallback","catch","err","console","error","render","log","className","onSubmit","htmlFor","id","placeholder","onChange","LogOutPage","TodoList","getTodoList","todo","deleteTodoItem","todo_id","updateTodoItem","createTodoItem","description","date","renderTodo","item","array","TableRow","TableCell","numeric","text","Button","component","Link","to","componentDidMount","Paper","Table","TableHead","TableBody","map","SignUpForm","hasAgreed","moment","require","CreateForm","message","format","toString","UpdateForm","getTodoItem","match","params","updated","util","DeleteId","deleted","deleteItem","mode","inspect","App","Home","Login","Logout","SignUp","TodoListManage","TodoListCreate","TodoListUpdate","TodoListDelete","dataFromChild","field","exact","path","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3358a1d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n//const util = require('util');\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n\n        //this.apihost = \"localhost\";\n        //this.apiport = 8082;\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n\n        this.state = {\n            email: 'mobile@andreboyce.com',\n            password: 'dbyudjns7i',\n            isLoggedin: false,\n            token: ''\n        };\n\n        let login = this.props.parentObject.parentGetCallback(\"login\");\n        this.state.token = login.token;\n        this.state.isLoggedin = login.isLoggedin;\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState( { [name]: value } );\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        \n        let endpoint = 'http://'+this.apihost+':'+this.apiport+'/api/login';\n\n        let body = JSON.stringify({\n                      email: this.state.email,\n                      password: this.state.password });\n\n        fetch( endpoint,\n               { /*mode: \"no-cors\", */\n                 method: 'POST', \n                 headers: { /*'Accept': 'application/json',*/\n                            \"Content-Type\": \"application/json\" },\n                 body: body }\n            )\n            .then( ( response ) => { \n                if( response.ok )\n                {\n                    //console.log( \"response.ok\" );\n                    response.json().then( \n                        ( json ) => { \n                            //console.log(json);\n                            //console.log( \"json[token]: \" + util.inspect(json[\"token\"], false, null, false) );\n                            this.setState( { token: json[\"token\"] } );\n                            if( json[\"isLoggedin\"] )\n                            {\n                                this.setState( { isLoggedin: json[\"isLoggedin\"] } );\n                            }\n                            //console.log( this.state );\n                            //console.log( \"handleSubmit this.props: \" + util.inspect(this.props, false, null, false) );\n                            this.props.parentObject.parentSetCallback( this.state );\n                            //console.log( \"this.props.parentCallback: \" + this.props.parentCallback );\n                        }\n                    );\n                }\n            }\n            )\n            .catch( \n               ( err ) => { console.error( \"Fetch Error: \" + err ) }\n            );\n    }\n\n    render() {\n        console.log( \"LoginForm render this.state.isLoggedin: \" + this.state.isLoggedin );\n        //this.props.parentCallback( this.state );\n        if( this.state.isLoggedin === true )\n        {\n            return (\n\n                    <div>\n                       You are now logged in.\n                       {/* Token: {this.state.token} */}\n                    </div>\n                );\n        }\n        else\n        {\n            return (\n                <div className=\"FormCenter\">\n                    <form onSubmit={this.handleSubmit} className=\"FormFields\">\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\n                        <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n                        </div>\n        \n                        <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                        </div>\n        \n                        <div className=\"FormField\">\n                            <button className=\"FormField__Button mr-20\">Sign In</button> {/*<Link to=\"/\" className=\"FormField__Link\">Create an account</Link>*/}\n                            </div>\n                    </form>\n                    </div>\n                );\n        }\n    }\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\n\n//const util = require('util');\n\nclass LogOutPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n\n        //let login = this.props.parentObject.parentGetCallback(\"login\");\n        //this.props.parentObject.parentSetCallback( false );\n\n        //console.log( \"LoginForm constructor this.state.isLoggedin: \" + util.inspect( this.state.isLoggedin, false, null, false ) );\n\n        this.state = {\n                        email: '',\n                        password: '',\n                        isLoggedin: false,\n                        token: ''\n                     };\n\n\n        this.props.parentObject.parentSetCallback( this.state );\n    }\n\n    render() {\n            return (\n                    <div>\n                       You are now logged out.\n                    </div>\n                   );\n    }\n}\n\nexport default LogOutPage;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//import PropTypes from 'prop-types';\n//import { withStyles } from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { todo: [] };\n\n        //this.apihost = \"localhost\";\n        //this.apiport = 8082;\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n    }\n\n\n    componentDidMount()\n    {\n      this.getTodoList();\n    }\n\n    /*\n        {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username: 'yourValue',\n            password: 'yourOtherValue',\n        })\n        }\n    */\n\n   getTodoList = () => \n    {\n      fetch( 'http://'+this.apihost+':'+this.apiport+'/api/todo/get'\n             //,{ mode: \"no-cors\", method: 'GET', headers: { \"Accept\": \"application/json\" } }\n           )\n         .then( ( response ) => { \n             if( response.ok )\n             {\n                response.json().then( \n                   ( json ) => { \n                     console.log(json); \n                     //this.setState( { todo: JSON.parse(json) } );\n                     this.setState( { todo: json } );\n                   }\n                );\n             }\n           }\n         )\n         .catch( \n           ( err ) => { console.error( \"Fetch Error: \" + err ) }\n         );\n    }\n\n    deleteTodoItem = ( todo_id ) => \n    {\n      console.log( \"deleteTodoItem: \" + todo_id );\n      /*fetch( 'http://'+this.apihost+':'+this.apiport+\"/api/todo/delete/:\"+todo_id,\n             { mode: \"no-cors\", method: 'DELETE' }\n           )\n         .then( ( response ) => { \n             if( response.ok )\n             {\n                //response.json().then( \n                //   ( json ) => { \n                //     console.log(json);\n                //     this.setState( { todo: json } );\n                //   }\n                //);\n             }\n           }\n         )\n         .catch( \n           ( err ) => { console.error( \"Fetch Error: \" + err ) }\n         );*/\n    }\n\n    updateTodoItem = ( todo_id ) => \n    {\n      console.log( \"updateTodoItem: \" + todo_id );\n      /*fetch( 'http://'+this.apihost+':'+this.apiport+\"/api/todo/delete/:\"+todo_id,\n             { mode: \"no-cors\", method: 'DELETE' }\n           )\n         .then( ( response ) => { \n             if( response.ok )\n             {\n                //response.json().then( \n                //   ( json ) => { \n                //     console.log(json);\n                //     this.setState( { todo: json } );\n                //   }\n                //);\n             }\n           }\n         )\n         .catch( \n           ( err ) => { console.error( \"Fetch Error: \" + err ) }\n         );*/\n    }\n\n    createTodoItem = ( name, description, date ) => \n    {\n      console.log( \"createTodoItem\" );\n      /*fetch( 'http://'+this.apihost+':'+this.apiport+\"/api/todo/delete/:\"+todo_id,\n             { mode: \"no-cors\", method: 'DELETE' }\n           )\n         .then( ( response ) => { \n             if( response.ok )\n             {\n                //response.json().then( \n                //   ( json ) => { \n                //     console.log(json);\n                //     this.setState( { todo: json } );\n                //   }\n                //);\n             }\n           }\n         )\n         .catch( \n           ( err ) => { console.error( \"Fetch Error: \" + err ) }\n         );*/\n    }\n    \n\n    renderTodo = ( item, id, array ) => {\n        //console.log( \"renderTodo item: \" + util.inspect(item, false, null, true ));\n        //console.log( \"renderTodo id: \" + util.inspect(id, false, null, true ));\n        //console.log( \"renderTodo array: \" + util.inspect(array, false, null, true ));\n        //console.log( \"======\" );\n        //return( <div key={item}>{item.id} {item.name} {item.description} {item.date}</div> );\n        return(  <TableRow key={item.id}>\n                   <TableCell></TableCell>\n                   <TableCell numeric>{item.id}</TableCell>\n                   <TableCell text>{item.name}</TableCell>\n                   <TableCell text>{item.description}</TableCell>\n                   <TableCell text>{item.date}</TableCell>\n                   <TableCell text>\n                      <Button component={Link} to={\"/todo/update/\"+item.id}>Update</Button>\n                      <Button component={Link} to={\"/todo/delete/\"+item.id}>Delete</Button>\n                   </TableCell>\n                 </TableRow>\n         );\n     }     \n\n    render() {\n        const { todo } = this.state;\n        return (\n          <Paper>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell text></TableCell>\n                  <TableCell text>ID</TableCell>\n                  <TableCell text>Name</TableCell>\n                  <TableCell text>Description</TableCell>\n                  <TableCell text>Date</TableCell>\n                  <TableCell text>Actions</TableCell>\n                </TableRow>\n                <TableRow>\n                   <TableCell text>\n                      {/*<Button onClick={this.createTodoItem}>Add New</Button>*/}\n                      <Button component={Link} to=\"/todo/create\">Add New</Button>\n                   </TableCell>\n                   <TableCell text></TableCell>\n                   <TableCell text></TableCell>\n                   <TableCell text></TableCell>\n                   <TableCell text></TableCell>\n                   <TableCell text></TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                 {todo.map(this.renderTodo)}\n              </TableBody>\n            </Table>\n          </Paper>\n        );\n    }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass SignUpForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n\n        this.state = {\n            email: '',\n            password: '',\n            name: '',\n            hasAgreed: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState({\n          [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        console.log('The form was submitted with the following data:');\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n        <div className=\"FormCenter\">\n            <form onSubmit={this.handleSubmit} className=\"FormFields\">\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"name\">Full Name</label>\n                <input type=\"text\" id=\"name\" className=\"FormField__Input\" placeholder=\"Enter your full name\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n              </div>\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n              </div>\n              <div className=\"FormField\">\n                <label className=\"FormField__Label\" htmlFor=\"email\">E-Mail Address</label>\n                <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              </div>\n              <div className=\"FormField\">\n                  <button className=\"FormField__Button mr-20\">Sign Up</button> <Link to=\"/sign-in\" className=\"FormField__Link\">I'm already member</Link>\n              </div>\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default SignUpForm;\n","import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\n\nvar moment = require('moment');\n\nclass CreateForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n\n\n        this.state = {\n            //isLoggedin: false,\n            //token: '',\n            name: '',\n            description: '',\n            date: '',\n            message: '',\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState({\n          [name]: value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        let endpoint = 'http://'+this.apihost+':'+this.apiport+'/api/todo/create';\n        //console.log(endpoint);\n\n        let date = (typeof this.state.date !== 'undefined' && this.state.date ) ? moment(this.state.date).format('YYYY-MM-DD').toString() : moment().format('YYYY-MM-DD').toString();\n\n        let body = JSON.stringify({\n                      id: 0,\n                      name: this.state.name,\n                      description: this.state.description, \n                      date: date });\n\n        fetch( endpoint,\n               { method: 'POST', \n                 headers: { \"Content-Type\": \"application/json\" },\n                 body: body }\n            )\n            .then( ( response ) => { \n                if( response.ok )\n                {\n                    //console.log( \"response.ok\" );\n                    response.json().then( \n                        ( json ) => { \n                            console.log(json);\n                            //this.setState( { todo: json } );\n                            this.setState( { message: json['message'] } );\n                        }\n                    );\n                }\n            }\n            )\n            .catch( \n            ( err ) => { console.error( \"Fetch Error: \" + err ) }\n            );\n    }\n\n    render() {\n        return (\n            <div>\n                <div>{this.state.message}</div>\n                <div className=\"FormCenter\">\n                    <form onSubmit={this.handleSubmit} className=\"FormFields\">\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"name\">Name</label>\n                        <input type=\"text\" id=\"email\" className=\"FormField__Input\" placeholder=\"Todo item name\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n                    </div>\n\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"description\">Description</label>\n                        <input type=\"description\" id=\"description\" className=\"FormField__Input\" placeholder=\"description\" name=\"description\" value={this.state.description} onChange={this.handleChange} />\n                    </div>\n\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"date\">Date</label>\n                        <input type=\"date\" id=\"date\" className=\"FormField__Input\" placeholder=\"\" name=\"date\" value={this.state.date} onChange={this.handleChange} /> {/* mysql is YYYY-MM-DD while this seems to be using DD-MM-YYYY*/}\n                    </div>\n\n                    <div className=\"FormField\">\n                        <button className=\"FormField__Button mr-20\">Create</button>\n                    </div>\n                    {/*  <Link to=\"/\" className=\"FormField__Link\">Home</Link> */}\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateForm;\n","import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\n\n//const util = require('util');\n\nvar moment = require('moment');\n\nclass UpdateForm extends Component {\n    constructor(props) {\n        super(props);\n\n        //this.apihost = \"localhost\";\n        //this.apiport = 8082;\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n\n        this.state = {\n            todo_id: 0,\n            //name: '',\n            //description: '',\n            //date: '',\n        };\n\n        if( typeof this.props.match.params.id !== 'undefined' && this.props.match.params.id )\n        {\n           this.state.todo_id = this.props.match.params.id;\n        }\n\n        this.getTodoItem();\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount ()\n    {\n\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        let name = target.name;\n\n        this.setState( {[name]: value } );\n    }\n\n    getTodoItem = () => \n    {\n      let endpoint = 'http://'+this.apihost+':'+this.apiport+'/api/todo/get/'+this.state.todo_id;\n      console.log( \"getTodoItem endpoint: \" + endpoint );\n\n      fetch( endpoint )\n         .then( ( response ) => { \n             if( response.ok )\n             {\n                response.json().then( \n                   ( json ) => { \n                     //console.log(json);\n                     //console.log( \"getTodoItem json: \"+ util.inspect(json, false, null, false) ); \n                     this.setState( { name: json['name'] } );\n                     this.setState( { description: json['description'] } );\n                     this.setState( { date: json['date'] } );\n                     //console.log( \"getTodoItem this.state: \"+ util.inspect(this.state, false, null, false) ); \n                   }\n                );\n             }\n           }\n         )\n         .catch( \n           ( err ) => { console.error( \"Fetch Error: \" + err ) }\n         );\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        let endpoint = 'http://'+this.apihost+':'+this.apiport+'/api/todo/update/'+this.state.todo_id;\n        //console.log(endpoint);\n\n        let date = (typeof this.state.date !== 'undefined' && this.state.date ) ? moment(this.state.date).format('YYYY-MM-DD').toString() : moment().format('YYYY-MM-DD').toString();\n\n        let body = JSON.stringify({\n                      id: 0,\n                      name: this.state.name,\n                      description: this.state.description, \n                      date: date });\n\n        fetch( endpoint,\n               { method: 'PUT', \n                 headers: { \"Content-Type\": \"application/json\" },\n                 body: body }\n            )\n            .then( ( response ) => { \n                if( response.ok )\n                {\n                    response.json().then( \n                        ( json ) => { \n                            //console.log(json);\n                            if( json['deleted'] !== 0 )\n                            {\n                                this.setState( { updated: json['updated'] } );\n                                this.setState( { message: json['message'] } );\n                            }\n                            else\n                            {\n                                this.setState( { updated: 0 } );\n                                this.setState( { message: json['message'] } );\n                            }\n                        }\n                    );\n                }\n            }\n            )\n            .catch( \n            ( err ) => { console.error( \"Fetch Error: \" + err ) }\n            );\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <div>Attempt to update record with id: {this.state.todo_id}</div>\n                    <div>{this.state.message}</div>\n                </div>\n\n                <div className=\"FormCenter\">\n                    <form onSubmit={this.handleSubmit} className=\"FormFields\">\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"name\">Name</label>\n                        <input type=\"text\" id=\"email\" className=\"FormField__Input\" placeholder=\"Todo item name\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n                    </div>\n\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"description\">Description</label>\n                        <input type=\"description\" id=\"description\" className=\"FormField__Input\" placeholder=\"description\" name=\"description\" value={this.state.description} onChange={this.handleChange} />\n                    </div>\n\n                    <div className=\"FormField\">\n                        <label className=\"FormField__Label\" htmlFor=\"date\">Date</label>\n                        <input type=\"date\" id=\"date\" className=\"FormField__Input\" placeholder=\"\" name=\"date\" value={this.state.date} onChange={this.handleChange} /> {/* mysql is YYYY-MM-DD while this seems to be using DD-MM-YYYY*/}\n                    </div>\n\n                    <div className=\"FormField\">\n                        <button className=\"FormField__Button mr-20\">Update</button>\n                    </div>\n                    {/*  <Link to=\"/\" className=\"FormField__Link\">Home</Link> */}\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UpdateForm;\n","import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\n\nconst util = require('util');\n\nclass DeleteId extends Component {\n    constructor(props) {\n        super(props);\n\n        //this.apihost = \"localhost\";\n        //this.apiport = 8082;\n\n        this.apihost = process.env.REACT_APP_SERVER_HOST;\n        this.apiport = process.env.REACT_APP_SERVER_PORT;\n\n        this.state = {\n            //isLoggedin: false,\n            //token: '',\n            deleted: 0,\n            message: \"\",\n            todo_id: 0,\n        };\n        //console.log( \"DeleteId constructor: \" + this.props );\n        //console.log( \"DeleteId constructor this.props.match.params.id: \" + util.inspect(this.props.match.params.id, false, null, false) );\n        if( typeof this.props.match.params.id !== 'undefined' && this.props.match.params.id )\n        {\n           this.state.todo_id = this.props.match.params.id;\n        }\n    }\n\n    componentDidMount ()\n    {\n        //console.log( \"DeleteId componentDidMount this.props: \" + util.inspect(this.props, false, null, false) );\n        //console.log( \"DeleteId componentDidMount this.props.match.params.id: \" + util.inspect(this.props.match.params.id, false, null, false) );\n        //const { todo_id } = this.props.match.params;        \n        //console.log( \"DeleteId componentDidMount this.state.todo_id: \" + util.inspect(this.state.todo_id, false, null, false) );\n        this.deleteItem();\n    }\n\n    deleteItem() {\n\n        let endpoint = 'http://'+this.apihost+':'+this.apiport+'/api/todo/delete/'+this.state.todo_id;\n        console.log(endpoint);\n\n        //let body = JSON.stringify( { id: this.state.todo_id } );\n\n        fetch( endpoint,\n               { /*mode: \"no-cors\", */\n                 mode: 'cors',\n                 method: 'DELETE'\n                 //headers: { 'Accept': 'application/json' },\n                 //body: body\n               }\n            )\n            .then( ( response ) => { \n                //console.log( \"response.ok\" );\n                console.log( \"DeleteId response.ok: \" + util.inspect(response.ok, false, null, false) );\n                if( response.ok )\n                {\n                    //console.log( \"response.ok\" );\n                    response.json().then( \n                        ( json ) => { \n                            //console.log(json);\n                            if( json['deleted'] !== 0 )\n                            {\n                                this.setState( { deleted: json['deleted'] } );\n                                this.setState( { message: json['message'] } );\n                            }\n                            else\n                            {\n                                this.setState( { deleted: 0 } );\n                                this.setState( { message: json['message'] } );\n                            }\n                        }\n                    );\n                }\n            })\n            .catch( ( err ) => { console.error( \"deleteItem: \" + err ) } );\n    }\n\n    render() {\n        //console.log( \"this.props.item_id: \" + util.inspect(this.props.item_id, false, null, false) );\n        \n        return (\n            <div>\n               <div>Attempt to delete record with id: {this.state.todo_id}</div>\n               <div>{this.state.message}</div>\n            </div>\n        );\n    }\n}\n\nexport default DeleteId;\n","import React, { Component } from 'react';\n\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nimport './App.css';\n\nimport LoginForm from './routes/LoginForm';\nimport LogOutPage from './routes/LogOutPage';\nimport TodoList from './routes/TodoList';\nimport SignUpForm from './routes/SignUpForm';\nimport CreateForm from './routes/CreateForm';\nimport UpdateForm from './routes/UpdateForm';\nimport DeleteId from './routes/DeleteId';\n\n//import logo from './logo.svg';\n//const util = require('util');\n\n//console.log( \"app.js process.env: \" + util.inspect(process.env, false, null, false) );\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { login: { email: '',\n                            password: '',\n                            isLoggedin: false,\n                            token: '' } \n                 };\n\n    this.parentSetCallback = this.parentSetCallback.bind(this);\n    this.parentGetCallback = this.parentGetCallback.bind(this);\n    this.Login  = this.Login.bind(this);\n    this.Logout = this.Logout.bind(this);\n    this.Home   = this.Home.bind(this);\n  }\n\n  componentDidMount()\n  {\n  }\n\n\n  Home = () => {\n    //console.log( \"Home this.state.login: \" + util.inspect(this.state.login, false, null, false) );\n\n    if( this.state.login.isLoggedin === true )\n    {\n      return(\n        <div>\n          <h2>Home</h2>\n          <div>You are logged in.</div>\n        </div>);\n    }\n    else\n    {\n      return(\n        <div>\n          <h2>Home</h2>\n          <div>You are not logged in.</div>\n          <Link to=\"/login\">Login</Link><br/>\n          {/*<LoginForm parentObject={parentObject} />*/}\n        </div>);\n    }\n  };\n  \n  Login = () => {\n    let parentObject = { parentGetCallback: this.parentGetCallback,\n                         parentSetCallback: this.parentSetCallback };\n    //console.log( \"Login parentObject: \" + util.inspect(parentObject, false, null, false) );\n    return (\n    <div>\n      <h2>Login</h2>\n      <LoginForm parentObject={parentObject}  />\n    </div> );\n  };\n\n  Logout = () => {\n    let parentObject = { parentGetCallback: this.parentGetCallback,\n                         parentSetCallback: this.parentSetCallback };\n    return (\n      <div>\n        <h2>Logout</h2>\n        <LogOutPage parentObject={parentObject}  />\n      </div> );\n  };\n  \n  SignUp = () => (\n    <div>\n      <h2>SignUpForm</h2>\n      <SignUpForm />\n    </div>\n  );\n  \n  TodoListManage = () => (\n    <div>\n      {/*<h2>Todo List</h2>*/}\n      <br/>\n      <TodoList />\n    </div>\n  );\n  \n  TodoListCreate = () => (\n    <div>\n      <h2>Todo List Create</h2>\n      <CreateForm />\n    </div>\n  );\n  \n  TodoListUpdate = ( { match } ) => {\n    return(\n      <div>\n         <h2>Todo List Update</h2>\n         <UpdateForm match={match} />\n       </div>\n    );\n  }\n  \n  TodoListDelete = ( { match } ) => (\n    <div>\n      <h2>Todo Item Delete</h2>\n      {/*<div>match.params.id: {match.params.id}</div>*/}\n      <DeleteId match={match} />\n      {/*<TodoList />*/}\n    </div>\n  );\n  \n  // callback for communication with children components\n  // allows the child to send values to the parent\n  parentSetCallback( dataFromChild )\n  {\n    //console.log( \"parentSetCallback dataFromChild: \" + util.inspect(dataFromChild, false, null, false) );\n    if( dataFromChild )\n    {\n      this.setState( { login: dataFromChild } );\n      //console.log( \"parentSetCallback this.state.login: \" + util.inspect(this.state.login, false, null, false) );\n    }\n  }\n\n  // callback for communication with children components\n  // allows the child to get values to from parent\n  parentGetCallback( field )\n  {\n      //console.log( \"parentGetCallback this.state: \" + util.inspect(this.state, false, null, false) );\n      //console.log( \"parentGetCallback this.state[field]: \" + util.inspect(this.state[field], false, null, false) );\n      return this.state[field];\n  }\n \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Todo List</h1>\n          <Router>\n             <div>\n                <Link to=\"/\">Home</Link><br/>\n                {(this.state.login.isLoggedin === true) ? \n                  (<div><Link to='/logout'>Logout</Link><br/>\n                        <Link to=\"/todo\">Todo List Manage</Link><br/>\n                   </div>) : \n                  (<div><Link to='/login'>Login</Link><br/></div>) }\n                {/*<Link to=\"/login\">Login</Link>*/} {/*| <Link to=\"/signup\">SignUp</Link><br/>*/}{/*<br/>*/}\n                {/*<Link to=\"/todo/create\">Todo List Create</Link><br/>*/}\n                {/*<Link to=\"/todo/update\">Todo List Update</Link><br/>*/}\n                {/*<Link to=\"/todo/delete\">Todo List Delete</Link><br/>*/}\n                {/*<Link to=\"/todo\">Todo List Manage</Link><br/>*/}\n                <Switch>\n                  <Route exact path=\"/\" component={this.Home} />\n                  <Route exact path=\"/login\" component={this.Login} />\n                  <Route exact path=\"/logout\" component={this.Logout} />\n                  <Route exact path=\"/signup\" component={this.SignUp} />\n                  <Route exact path=\"/todo\" component={this.TodoListManage} />\n                  <Route exact path=\"/todo/create\" component={this.TodoListCreate} />\n                  <Route exact path=\"/todo/update/:id\" component={this.TodoListUpdate} />\n                  {/*<Route exact path=\"/todo/update/:id\" render={({props})=>{ <TodoListUpdate props={props} />}} />*/}\n                  <Route exact path=\"/todo/delete/:id\" component={this.TodoListDelete} />\n                </Switch>\n             </div>\n          </Router>        \n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    //const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    console.log( 'publicUrl: ' + publicUrl );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}